#!/usr/bin/env python

import sys, shelve, time, random, getopt

workpath = '/root/cloudvirt/'
def s2hr(s):
    ret = ''
    if s/3600 > 0:
        ret += str(s/3600) + 'h '
        s %= 3600
    if s/60 > 0:
        ret += str(s/60) + 'm '
        s %= 60
    ret += str(s) + 's'
    return ret

def shelveload():
    ret = {}
    try:
        db = shelve.open(workpath + '/db4vm.dat', 'r')
        ret.update(db)
    finally:
        db.close()
    return ret
    
def dbsort(db, subkey):
    ret = {}
    try:
        for key in db.keys():
            ret[str(db[key][subkey]) + str(random.random())] = db[key]
        return ret
    except Exception, e:
        return db

def usage(db, timeinternal, sortarg):
    print "List Virtual Machines in Nodes configured in File : [ nodelist ]"
    print "  -n, --name=NAME\tSearch for all VM name contains NAME"
    print "  -p, --pmip=IP  \tSearch for all PM IP contains IP"
    print "  -t, --time=TIME\tLimit the update time with in TIME (Default %d)" % timeinternal
    print "  -s, --sort=COL \tSort list by COL (Default %s)" % sortarg
    db = db[db.keys()[0]]
    print "  \t\t\tSort COL: ",
    for key in db.keys():
        print key + " |",

searchname = ''
searchpmip = ''
timeinternal = 200
sortarg = 'pm'

idb = shelveload()

try:
    opts, args = getopt.getopt(sys.argv[1:], "i:n:p:t:s:h", ["name=","pmip=","time=","sort=","help"])
except:
    usage(idb, timeinternal, sortarg)
    sys.exit()

for a,o in opts:
    if a in ('--help', '-h'):
        usage(idb, timeinternal, sortarg)
        sys.exit()
    if a in ('--name', '-n'):
        searchname = o
    if a in ('--pmip', '-p'):
        searchpmip = o
    if a in ('--time', '-t'):
        timeinternal = int(o)
    if a in ('--sort', '-s'):
        sortarg = o

print 'PM\tID\tVM\tIP\tMAC\tVCpus\tMEM\tCPU time\tStatus\tCreate time\tUpdate Time'

db = dbsort(idb, sortarg)
pms = db.keys()
pms.sort()
nowtime = time.time()
pmcnt = 0
for key in pms:
    dom = db[key]
    updatetime = int(nowtime - time.mktime(dom['update_time']))
    if type(dom['create_time']) == str:
        createtime = "None"
    else:
        createtime = time.strftime("%y-%m-%d %H:%M", dom['create_time'])
    if updatetime < timeinternal and searchname in dom['name'] and searchpmip in dom['pm']:
        pmcnt += 1
        print '%s :%d\t%s\t%s\t%s\t%d %dM\t%ss\t%s\t%s\t^%ss ago' % (dom['pm'], dom['id_on_pm'], dom['name'], dom['ip'], dom['mac'], dom['vcpu'], dom['mem'], dom['cputime'], dom['status'], createtime, updatetime)

print "Total %s VMs" % pmcnt

