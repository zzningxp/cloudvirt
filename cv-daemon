#!/usr/bin/env python

import sys, os    
import logging, threading
import time
import monitorvm, monitorip

workpath = '/root/cloudvirt/'
timeinterval = 30
xtime = 10

def main(logger):   
    c = 0
    while 1:
        getins = threading.Thread(target=monitorvm.getinstances, args=(logger,))
        getins.start()
        #monitorvm.getinstances(logger)
        if c == 0:
            upip = threading.Thread(target=monitorip.updateipdb, args=(logger,))
            upip.start()
        time.sleep(timeinterval)
        c = (c + 1) % xtime

def initlog(logfile):
    logger = logging.getLogger()
    hdlr = logging.FileHandler(logfile)
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.NOTSET)
    return logger

if __name__ == "__main__":   
    # do the UNIX double-fork magic, see Stevens' "Advanced    
    # Programming in the UNIX Environment" for details (ISBN 0201563177)   
    try:    
        pid = os.fork()    
        if pid > 0:   
            # exit first parent   
            sys.exit(0)    
    except OSError, e:    
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror)    
        sys.exit(1)   
    # decouple from parent environment   
    os.chdir(workpath)    
    os.setsid()    
    os.umask(0)    
    # do second fork   
    try:    
        pid = os.fork()    
        if pid > 0:   
            # exit from second parent, print eventual PID before   
            print "Daemon PID %d" % pid    
            sys.exit(0)    
    except OSError, e:    
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror)    
        sys.exit(1)    
    # start the daemon main loop   
    main(initlog("/root/cloudvirt/deamon.log"))
