#!/usr/bin/python

import libvirt
import os, sys, random, re, threading, time, getopt
import libImage, libInstance, libMysqlImages 

imgdbf = "db4img.dat"

def usage():
    print """\
Usage: cv-create-instance -i IMG -h HEADNODE -n FILE -c CPUs -m MEM [-y] [--same-location] [--only-dispatch]

    -i, --image=IMG\t\tImage ID
    -h, --headnode=HEAD\t\tHeadnode who has the image
    -n, --nodes=FILE\t\tFile Contains Nodes and Numbers to Create Instances
    -c, --vcpus=CPUs\t\tVCPUs Number of the Virtual Machines
    -m, --mem=MEM\t\tMemory of the Virtual Machines, in Mage Byte
    -y\t\t\tAnswer all question yes
    --same-location\t\tHeadnode is inside of the nodes cluster
    --only-dispatch\t\tOnly Dispatch Images, NOT to create instance

Run cv-describe-images to see Registered Images

Nodes File Format (on each line):
PM(Physical Machine to Create Instances) number(Number of Intances on that PM)
Example: 192.168.1.1 2\
"""

try:
    opts, args = getopt.getopt(sys.argv[1:], "i:n:c:m:h:y", ["image=", "nodes=", "vcpus=", "mem=", "headnode=", "same-location", "only-dispatch"])
except:
    usage()
    sys.exit()

imageid = 0
nodes_file = ''
vcpus = 0
mem = 0
is_samelocation = False
only_dispatch = False
headnode = ''
allyes = False
for a,o in opts:
    if a in ('--image', '-i'):
        imageid = o
    if a in ('--nodes', '-n'):
        nodes_file = o
    if a in ('--vcpus', '-c'):
        vcpus = int(o)
    if a in ('--mem', '-m'):
        mem = int(o)
    if a in ('--headnode', '-h'):
        headnode = o
    if a in ('--same-location'):
        is_samelocation = True
    if a in ('--only-dispatch'):
        only_dispatch = True
    if a in ('-y'):
        allyes = True
if imageid == 0 or nodes_file == '' or vcpus == 0 or mem == 0 or headnode == '':
    usage()
    sys.exit()

img = libMysqlImages.Images()
nodes, num, cluster_list = libImage.read_nodes(nodes_file)
imginfo = img.select_dict_withtuples([(img.col_imageid, imageid)])
if len(imginfo) == 0:
    print "Image Id %s doesn't existed. Run cv-describe-images to see Registered Images" % imageid
    sys.exit()
## check the image file existing
imginfo = imginfo[0]
imagename = os.path.basename(imginfo[img.col_filepath])
chunkcount = imginfo[img.col_chunk_count]

imgblock = libMysqlImages.ImageBlocks()
checksum = imgblock.get_checksum(imageid)
chunksizes = imgblock.get_block_size(imageid)

cluster_nodes = libImage.get_clusters(nodes, cluster_list, nodes)
if not allyes:
    print "Prepare VMs on:"
    i = 0
    for ci, cn in enumerate(cluster_nodes):
        print 'Cluster %d' % ci
        for n in cn:
            print "%s [%s VM]\t" % (n, num[i])
            i += 1
    print "(Total %d nodes on %d clusters)" % (i, len(cluster_nodes))
    print "Image ID is %s, with %d Virtual CPUs and %dM Memory." % (imageid, vcpus, mem)
    if only_dispatch:
        print "Only Dispatch Image"
    print "Are You Sure (y/n)?",
    v = raw_input()
    if v != 'y' :
        sys.exit(1)

if not only_dispatch:
    instance_names = libInstance.generate_instances_info(nodes, num, imageid, vcpus, mem)
    print 'Instance Info Generated.. Done.'

timestamp = time.time()
libImage.dispatch_nv(nodes, headnode, imageid)
need_image_nodes = libImage.check_nodes(nodes, imageid, imagename, checksum, chunksizes, chunkcount)
#need_image_nodes = nodes
print 'Prepare to Dispatch Image.. Done. Time Used: %d' % (time.time() - timestamp)

print 'Dispatching Image to Nodes..' 
timestamp = time.time()
libImage.dispatch_image(nodes, cluster_list, need_image_nodes, headnode, imageid, imagename, chunkcount, is_samelocation)
print 'Dispatch Image to Nodes.. Done. Time Used: %d' % (time.time() - timestamp)
#libImage.kill_httpd([headnode] + nodes)

if not only_dispatch:
    timestamp = time.time()
    libImage.local_decompress(nodes, headnode, num, imageid, imagename, instance_names)
    print 'Nodes Image Local Copy.. Done. Time Used: %d' % (time.time() - timestamp)

    libInstance.create_instance(nodes, instance_names)
    ## print error info
    print 'Instances Create.. Done.'

