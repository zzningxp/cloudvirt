#!/usr/bin/env python

import libvirt
import os, sys, random, re, threading, time, getopt
import libshelve, libImage, libInstance

imgdbf = "db4img.dat"

def read_nodes(nodes_file):
    lines = open(nodes_file).read()
    lines = re.split(r"\n", lines)
    lines.remove('')
    nodes = []
    num = []
    for n in lines:
        n = re.split(r"\s", n)
        try:
            n.remove('')
        except:
            pass
        if not len(n) == 2:
            print 'Nodes File has a Wrong Format'
            usage()
            sys.exit()
        nodes.append(n[0])
        num.append(int(n[1]))
    return nodes, num

def usage():
    print """\
Usage: cv-create-instance -i IMG -h HEADNODE -n FILE -c CPUs -m MEM [-y] [--same-location] [--only-dispatch]

    -i, --image=IMG\t\tImage ID
    -n, --nodes=FILE\t\tFile Contains Nodes and Numbers to Create Instances
    -c, --vcpus=CPUs\t\tVCPUs Number of the Virtual Machines
    -m, --mem=MEM\t\tMemory of the Virtual Machines, in Mage Byte
    -y\t\t\tAnswer all question yes
    -h, --headnode=HEAD\t\tHeadnode who has the image
    --same-location\t\tHeadnode is inside of the nodes cluster
    --only-dispatch\t\tOnly Dispatch Images, NOT to create instance

Run cv-describe-images to see Registered Images

Nodes File Format (on each line):
PM(Physical Machine to Create Instances) number(Number of Intances on that PM)
Example: 192.168.1.1 2\
"""

try:
    opts, args = getopt.getopt(sys.argv[1:], "i:n:c:m:h:y", ["image=", "nodes=", "vcpus=", "mem=", "headnode=", "same-location", "only-dispatch"])
except:
    usage()
    sys.exit()

imageid = 0
nodes_file = ''
vcpus = 0
mem = 0
is_samelocation = False
only_dispatch = False
headnode = ''
concurrence = 3
allyes = False
for a,o in opts:
    if a in ('--image', '-i'):
        imageid = o
    if a in ('--nodes', '-n'):
        nodes_file = o
    if a in ('--vcpus', '-c'):
        vcpus = int(o)
    if a in ('--mem', '-m'):
        mem = int(o)
    if a in ('--headnode', '-h'):
        headnode = o
    if a in ('--same-location'):
        is_samelocation = True
    if a in ('--only-dispatch'):
        only_dispatch = True
    if a in ('-y'):
        allyes = True
if imageid == 0 or nodes_file == '' or vcpus == 0 or mem == 0 or headnode == '':
    usage()
    sys.exit()

if not libshelve.iskeyexists(imgdbf, imageid):
    print "Image Id %s doesn't existed. Run cv-describe-images to see Registered Images" % imageid
    sys.exit()

nodes, num = read_nodes(nodes_file)

imginfo = libshelve.getkey(imgdbf, imageid)
imagename = os.path.basename(imginfo['imagefilepath'])
checksum = imginfo['fastcheck']
imagesize = imginfo['imagesize']

print "Prepare VMs on:"
total = len(nodes)
for i in range(total):
    print "%s [%s VM]\t" % (nodes[i], num[i])
print "(Total %d nodes)" % (total)
print "Image ID is %s, with %d Virtual CPUs and %dM Memory." % (imageid, vcpus, mem)
if only_dispatch:
    print "Only Dispatch Image"
print "Are You Sure (y/n)?",
if allyes:
    v = 'y'
else:
    v = raw_input()
if v != 'y' :
    sys.exit(1)

if not only_dispatch:
    instance_names = libInstance.generate_instances_info(nodes, num, imageid, vcpus, mem)
    print 'Instance Info Generated.. Done.'

libImage.dispatch_nv(nodes, headnode, imageid, concurrence)
image_nodes = libImage.check_nodes(nodes, imageid, imagename, checksum, imagesize)
print 'Prepare to Dispatch Image.. Done.'

libImage.dispatch_image(image_nodes, headnode, imageid, imagename, imagesize, concurrence, is_samelocation)
print 'Dispatch Image to Nodes.. Done.'

if not only_dispatch:
    libImage.local_copy(nodes, headnode, num, imageid, imagename, instance_names)
    print 'Nodes Image Local Copy.. Done.'

    libInstance.create_instance(nodes, instance_names)
    ## print error info
    print 'Instances Create.. Done.'

